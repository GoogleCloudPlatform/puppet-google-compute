# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'spec_helper'

describe Puppet::Type.type(:gcompute_global_forwarding_rule).provider(:google) do
  before(:all) do
    cred = Google::FakeAuthorization.new
    Puppet::Type.type(:gauth_credential)
                .define_singleton_method(:fetch) { |_resource| cred }
  end

  it '#instances' do
    expect { described_class.instances }.to raise_error(StandardError,
                                                        /not supported/)
  end

  context 'ensure == present' do
    context 'resource exists' do
      # Ensure present: resource exists, no change
      context 'no changes == no action' do
        # Ensure present: resource exists, no change, no name
        context 'title == name' do
          # Ensure present: resource exists, no change, no name, pass
          context 'title == name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1, name: 'title0'
              expect_network_get_success 2, name: 'title1'
              expect_network_get_success 3, name: 'title2'
              expect_network_get_success_backend_service 1
              expect_network_get_success_backend_service 2
              expect_network_get_success_backend_service 3
              expect_network_get_success_network 1
              expect_network_get_success_network 2
              expect_network_get_success_network 3
              expect_network_get_success_region 1
              expect_network_get_success_region 2
              expect_network_get_success_region 3
              expect_network_get_success_subnetwork 1, region: 'test name#0 data'
              expect_network_get_success_subnetwork 2, region: 'test name#1 data'
              expect_network_get_success_subnetwork 3, region: 'test name#2 data'
            end

            let(:catalog) do
              apply_with_error_check(
                <<-MANIFEST
                gcompute_backend_service { 'resource(backend_service,0)':
                  ensure     => present,
                  name       => 'test name#0 data',
                  project    => 'test project#0 data',
                  credential => 'cred0',
                }

                gcompute_backend_service { 'resource(backend_service,1)':
                  ensure     => present,
                  name       => 'test name#1 data',
                  project    => 'test project#1 data',
                  credential => 'cred1',
                }

                gcompute_backend_service { 'resource(backend_service,2)':
                  ensure     => present,
                  name       => 'test name#2 data',
                  project    => 'test project#2 data',
                  credential => 'cred2',
                }

                gcompute_network { 'resource(network,0)':
                  ensure     => present,
                  name       => 'test name#0 data',
                  project    => 'test project#0 data',
                  credential => 'cred0',
                }

                gcompute_network { 'resource(network,1)':
                  ensure     => present,
                  name       => 'test name#1 data',
                  project    => 'test project#1 data',
                  credential => 'cred1',
                }

                gcompute_network { 'resource(network,2)':
                  ensure     => present,
                  name       => 'test name#2 data',
                  project    => 'test project#2 data',
                  credential => 'cred2',
                }

                gcompute_region { 'resource(region,0)':
                  name       => 'test name#0 data',
                  project    => 'test project#0 data',
                  credential => 'cred0',
                }

                gcompute_region { 'resource(region,1)':
                  name       => 'test name#1 data',
                  project    => 'test project#1 data',
                  credential => 'cred1',
                }

                gcompute_region { 'resource(region,2)':
                  name       => 'test name#2 data',
                  project    => 'test project#2 data',
                  credential => 'cred2',
                }

                gcompute_subnetwork { 'resource(subnetwork,0)':
                  ensure        => present,
                  ip_cidr_range => 'test ip_cidr_range#0 data',
                  name          => 'test name#0 data',
                  network       => 'resource(network,0)',
                  region        => 'resource(region,0)',
                  project       => 'test project#0 data',
                  credential    => 'cred0',
                }

                gcompute_subnetwork { 'resource(subnetwork,1)':
                  ensure        => present,
                  ip_cidr_range => 'test ip_cidr_range#1 data',
                  name          => 'test name#1 data',
                  network       => 'resource(network,1)',
                  region        => 'resource(region,1)',
                  project       => 'test project#1 data',
                  credential    => 'cred1',
                }

                gcompute_subnetwork { 'resource(subnetwork,2)':
                  ensure        => present,
                  ip_cidr_range => 'test ip_cidr_range#2 data',
                  name          => 'test name#2 data',
                  network       => 'resource(network,2)',
                  region        => 'resource(region,2)',
                  project       => 'test project#2 data',
                  credential    => 'cred2',
                }

                gcompute_global_forwarding_rule { 'title0':
                  ensure                => present,
                  backend_service       => 'resource(backend_service,0)',
                  description           => 'test description#0 data',
                  ip_address            => 'test ip_address#0 data',
                  ip_protocol           => 'TCP',
                  ip_version            => 'IPV4',
                  load_balancing_scheme => 'INTERNAL',
                  network               => 'resource(network,0)',
                  port_range            => 'test port_range#0 data',
                  ports                 => ['uu', 'vv'],
                  subnetwork            => 'resource(subnetwork,0)',
                  target                => 'test target#0 data',
                  project               => 'test project#0 data',
                  credential            => 'cred0',
                }

                gcompute_global_forwarding_rule { 'title1':
                  ensure                => present,
                  backend_service       => 'resource(backend_service,1)',
                  description           => 'test description#1 data',
                  ip_address            => 'test ip_address#1 data',
                  ip_protocol           => 'UDP',
                  ip_version            => 'IPV6',
                  load_balancing_scheme => 'EXTERNAL',
                  network               => 'resource(network,1)',
                  port_range            => 'test port_range#1 data',
                  ports                 => ['qq', 'rr'],
                  subnetwork            => 'resource(subnetwork,1)',
                  target                => 'test target#1 data',
                  project               => 'test project#1 data',
                  credential            => 'cred1',
                }

                gcompute_global_forwarding_rule { 'title2':
                  ensure                => present,
                  backend_service       => 'resource(backend_service,2)',
                  description           => 'test description#2 data',
                  ip_address            => 'test ip_address#2 data',
                  ip_protocol           => 'ESP',
                  ip_version            => 'IPV4',
                  load_balancing_scheme => 'INTERNAL',
                  network               => 'resource(network,2)',
                  port_range            => 'test port_range#2 data',
                  ports                 => ['mm', 'nn'],
                  subnetwork            => 'resource(subnetwork,2)',
                  target                => 'test target#2 data',
                  project               => 'test project#2 data',
                  credential            => 'cred2',
                }
                MANIFEST
              ).catalog
            end

            context 'Gcompute_global_forwarding_rule[title0]' do
              subject do
                catalog.resource('Gcompute_global_forwarding_rule[title0]').provider
              end

              it do
                is_expected
                  .to have_attributes(creation_timestamp: ::Time.parse('2045-05-23T12:08:10+00:00'))
              end
              it { is_expected.to have_attributes(description: 'test description#0 data') }
              it { is_expected.to have_attributes(id: 2_149_500_871) }
              it { is_expected.to have_attributes(ip_address: 'test ip_address#0 data') }
              it { is_expected.to have_attributes(ip_protocol: 'TCP') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'backendService' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(ip_version: 'IPV4') }
              it { is_expected.to have_attributes(load_balancing_scheme: 'INTERNAL') }
              it { is_expected.to have_attributes(name: 'title0') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'network' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(port_range: 'test port_range#0 data') }
              it { is_expected.to have_attributes(ports: %w[uu vv]) }
              # TODO(alexstephen): Implement resourceref test.
              # it 'subnetwork' do
              #   # Add test code here
              # end
              # TODO(alexstephen): Implement resourceref test.
              # it 'region' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(target: 'test target#0 data') }
            end

            context 'Gcompute_global_forwarding_rule[title1]' do
              subject do
                catalog.resource('Gcompute_global_forwarding_rule[title1]').provider
              end

              it do
                is_expected
                  .to have_attributes(creation_timestamp: ::Time.parse('2120-10-14T00:16:21+00:00'))
              end
              it { is_expected.to have_attributes(description: 'test description#1 data') }
              it { is_expected.to have_attributes(id: 4_299_001_743) }
              it { is_expected.to have_attributes(ip_address: 'test ip_address#1 data') }
              it { is_expected.to have_attributes(ip_protocol: 'UDP') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'backendService' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(ip_version: 'IPV6') }
              it { is_expected.to have_attributes(load_balancing_scheme: 'EXTERNAL') }
              it { is_expected.to have_attributes(name: 'title1') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'network' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(port_range: 'test port_range#1 data') }
              it { is_expected.to have_attributes(ports: %w[qq rr]) }
              # TODO(alexstephen): Implement resourceref test.
              # it 'subnetwork' do
              #   # Add test code here
              # end
              # TODO(alexstephen): Implement resourceref test.
              # it 'region' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(target: 'test target#1 data') }
            end

            context 'Gcompute_global_forwarding_rule[title2]' do
              subject do
                catalog.resource('Gcompute_global_forwarding_rule[title2]').provider
              end

              it do
                is_expected
                  .to have_attributes(creation_timestamp: ::Time.parse('2196-03-05T12:24:32+00:00'))
              end
              it { is_expected.to have_attributes(description: 'test description#2 data') }
              it { is_expected.to have_attributes(id: 6_448_502_614) }
              it { is_expected.to have_attributes(ip_address: 'test ip_address#2 data') }
              it { is_expected.to have_attributes(ip_protocol: 'ESP') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'backendService' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(ip_version: 'IPV4') }
              it { is_expected.to have_attributes(load_balancing_scheme: 'INTERNAL') }
              it { is_expected.to have_attributes(name: 'title2') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'network' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(port_range: 'test port_range#2 data') }
              it { is_expected.to have_attributes(ports: %w[mm nn]) }
              # TODO(alexstephen): Implement resourceref test.
              # it 'subnetwork' do
              #   # Add test code here
              # end
              # TODO(alexstephen): Implement resourceref test.
              # it 'region' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(target: 'test target#2 data') }
            end
          end

          # Ensure present: resource exists, no change, no name, fail
          context 'title == name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, no change, has name
        context 'title != name' do
          # Ensure present: resource exists, no change, has name, pass
          context 'title != name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1
              expect_network_get_success 2
              expect_network_get_success 3
              expect_network_get_success_backend_service 1
              expect_network_get_success_backend_service 2
              expect_network_get_success_backend_service 3
              expect_network_get_success_network 1
              expect_network_get_success_network 2
              expect_network_get_success_network 3
              expect_network_get_success_region 1
              expect_network_get_success_region 2
              expect_network_get_success_region 3
              expect_network_get_success_subnetwork 1, region: 'test name#0 data'
              expect_network_get_success_subnetwork 2, region: 'test name#1 data'
              expect_network_get_success_subnetwork 3, region: 'test name#2 data'
            end

            let(:catalog) do
              apply_with_error_check(
                <<-MANIFEST
                gcompute_backend_service { 'resource(backend_service,0)':
                  ensure     => present,
                  name       => 'test name#0 data',
                  project    => 'test project#0 data',
                  credential => 'cred0',
                }

                gcompute_backend_service { 'resource(backend_service,1)':
                  ensure     => present,
                  name       => 'test name#1 data',
                  project    => 'test project#1 data',
                  credential => 'cred1',
                }

                gcompute_backend_service { 'resource(backend_service,2)':
                  ensure     => present,
                  name       => 'test name#2 data',
                  project    => 'test project#2 data',
                  credential => 'cred2',
                }

                gcompute_network { 'resource(network,0)':
                  ensure     => present,
                  name       => 'test name#0 data',
                  project    => 'test project#0 data',
                  credential => 'cred0',
                }

                gcompute_network { 'resource(network,1)':
                  ensure     => present,
                  name       => 'test name#1 data',
                  project    => 'test project#1 data',
                  credential => 'cred1',
                }

                gcompute_network { 'resource(network,2)':
                  ensure     => present,
                  name       => 'test name#2 data',
                  project    => 'test project#2 data',
                  credential => 'cred2',
                }

                gcompute_region { 'resource(region,0)':
                  name       => 'test name#0 data',
                  project    => 'test project#0 data',
                  credential => 'cred0',
                }

                gcompute_region { 'resource(region,1)':
                  name       => 'test name#1 data',
                  project    => 'test project#1 data',
                  credential => 'cred1',
                }

                gcompute_region { 'resource(region,2)':
                  name       => 'test name#2 data',
                  project    => 'test project#2 data',
                  credential => 'cred2',
                }

                gcompute_subnetwork { 'resource(subnetwork,0)':
                  ensure        => present,
                  ip_cidr_range => 'test ip_cidr_range#0 data',
                  name          => 'test name#0 data',
                  network       => 'resource(network,0)',
                  region        => 'resource(region,0)',
                  project       => 'test project#0 data',
                  credential    => 'cred0',
                }

                gcompute_subnetwork { 'resource(subnetwork,1)':
                  ensure        => present,
                  ip_cidr_range => 'test ip_cidr_range#1 data',
                  name          => 'test name#1 data',
                  network       => 'resource(network,1)',
                  region        => 'resource(region,1)',
                  project       => 'test project#1 data',
                  credential    => 'cred1',
                }

                gcompute_subnetwork { 'resource(subnetwork,2)':
                  ensure        => present,
                  ip_cidr_range => 'test ip_cidr_range#2 data',
                  name          => 'test name#2 data',
                  network       => 'resource(network,2)',
                  region        => 'resource(region,2)',
                  project       => 'test project#2 data',
                  credential    => 'cred2',
                }

                gcompute_global_forwarding_rule { 'title0':
                  ensure                => present,
                  backend_service       => 'resource(backend_service,0)',
                  description           => 'test description#0 data',
                  ip_address            => 'test ip_address#0 data',
                  ip_protocol           => 'TCP',
                  ip_version            => 'IPV4',
                  load_balancing_scheme => 'INTERNAL',
                  name                  => 'test name#0 data',
                  network               => 'resource(network,0)',
                  port_range            => 'test port_range#0 data',
                  ports                 => ['uu', 'vv'],
                  subnetwork            => 'resource(subnetwork,0)',
                  target                => 'test target#0 data',
                  project               => 'test project#0 data',
                  credential            => 'cred0',
                }

                gcompute_global_forwarding_rule { 'title1':
                  ensure                => present,
                  backend_service       => 'resource(backend_service,1)',
                  description           => 'test description#1 data',
                  ip_address            => 'test ip_address#1 data',
                  ip_protocol           => 'UDP',
                  ip_version            => 'IPV6',
                  load_balancing_scheme => 'EXTERNAL',
                  name                  => 'test name#1 data',
                  network               => 'resource(network,1)',
                  port_range            => 'test port_range#1 data',
                  ports                 => ['qq', 'rr'],
                  subnetwork            => 'resource(subnetwork,1)',
                  target                => 'test target#1 data',
                  project               => 'test project#1 data',
                  credential            => 'cred1',
                }

                gcompute_global_forwarding_rule { 'title2':
                  ensure                => present,
                  backend_service       => 'resource(backend_service,2)',
                  description           => 'test description#2 data',
                  ip_address            => 'test ip_address#2 data',
                  ip_protocol           => 'ESP',
                  ip_version            => 'IPV4',
                  load_balancing_scheme => 'INTERNAL',
                  name                  => 'test name#2 data',
                  network               => 'resource(network,2)',
                  port_range            => 'test port_range#2 data',
                  ports                 => ['mm', 'nn'],
                  subnetwork            => 'resource(subnetwork,2)',
                  target                => 'test target#2 data',
                  project               => 'test project#2 data',
                  credential            => 'cred2',
                }
                MANIFEST
              ).catalog
            end

            context 'Gcompute_global_forwarding_rule[title0]' do
              subject do
                catalog.resource('Gcompute_global_forwarding_rule[title0]').provider
              end

              it do
                is_expected
                  .to have_attributes(creation_timestamp: ::Time.parse('2045-05-23T12:08:10+00:00'))
              end
              it { is_expected.to have_attributes(description: 'test description#0 data') }
              it { is_expected.to have_attributes(id: 2_149_500_871) }
              it { is_expected.to have_attributes(ip_address: 'test ip_address#0 data') }
              it { is_expected.to have_attributes(ip_protocol: 'TCP') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'backendService' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(ip_version: 'IPV4') }
              it { is_expected.to have_attributes(load_balancing_scheme: 'INTERNAL') }
              it { is_expected.to have_attributes(name: 'test name#0 data') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'network' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(port_range: 'test port_range#0 data') }
              it { is_expected.to have_attributes(ports: %w[uu vv]) }
              # TODO(alexstephen): Implement resourceref test.
              # it 'subnetwork' do
              #   # Add test code here
              # end
              # TODO(alexstephen): Implement resourceref test.
              # it 'region' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(target: 'test target#0 data') }
            end

            context 'Gcompute_global_forwarding_rule[title1]' do
              subject do
                catalog.resource('Gcompute_global_forwarding_rule[title1]').provider
              end

              it do
                is_expected
                  .to have_attributes(creation_timestamp: ::Time.parse('2120-10-14T00:16:21+00:00'))
              end
              it { is_expected.to have_attributes(description: 'test description#1 data') }
              it { is_expected.to have_attributes(id: 4_299_001_743) }
              it { is_expected.to have_attributes(ip_address: 'test ip_address#1 data') }
              it { is_expected.to have_attributes(ip_protocol: 'UDP') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'backendService' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(ip_version: 'IPV6') }
              it { is_expected.to have_attributes(load_balancing_scheme: 'EXTERNAL') }
              it { is_expected.to have_attributes(name: 'test name#1 data') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'network' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(port_range: 'test port_range#1 data') }
              it { is_expected.to have_attributes(ports: %w[qq rr]) }
              # TODO(alexstephen): Implement resourceref test.
              # it 'subnetwork' do
              #   # Add test code here
              # end
              # TODO(alexstephen): Implement resourceref test.
              # it 'region' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(target: 'test target#1 data') }
            end

            context 'Gcompute_global_forwarding_rule[title2]' do
              subject do
                catalog.resource('Gcompute_global_forwarding_rule[title2]').provider
              end

              it do
                is_expected
                  .to have_attributes(creation_timestamp: ::Time.parse('2196-03-05T12:24:32+00:00'))
              end
              it { is_expected.to have_attributes(description: 'test description#2 data') }
              it { is_expected.to have_attributes(id: 6_448_502_614) }
              it { is_expected.to have_attributes(ip_address: 'test ip_address#2 data') }
              it { is_expected.to have_attributes(ip_protocol: 'ESP') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'backendService' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(ip_version: 'IPV4') }
              it { is_expected.to have_attributes(load_balancing_scheme: 'INTERNAL') }
              it { is_expected.to have_attributes(name: 'test name#2 data') }
              # TODO(alexstephen): Implement resourceref test.
              # it 'network' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(port_range: 'test port_range#2 data') }
              it { is_expected.to have_attributes(ports: %w[mm nn]) }
              # TODO(alexstephen): Implement resourceref test.
              # it 'subnetwork' do
              #   # Add test code here
              # end
              # TODO(alexstephen): Implement resourceref test.
              # it 'region' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(target: 'test target#2 data') }
            end
          end

          # Ensure present: resource exists, no change, has name, fail
          context 'title != name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end

      # Ensure present: resource exists, changes
      context 'changes == action' do
        # Ensure present: resource exists, changes, no name
        context 'title == name' do
          # Ensure present: resource exists, changes, no name, pass
          context 'title == name (pass)' do
            # TODO(nelsonjr): Implement new test format.
          end

          # Ensure present: resource exists, changes, no name, fail
          context 'title == name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, changes, has name
        context 'title != name' do
          # Ensure present: resource exists, changes, has name, pass
          context 'title != name (pass)' do
            # TODO(nelsonjr): Implement new test format.
          end

          # Ensure present: resource exists, changes, has name, fail
          context 'title != name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end
    end

    context 'resource missing' do
      # Ensure present: resource missing, ignore, no name
      context 'title == name' do
        # Ensure present: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_failed 1, name: 'title0'
            expect_network_create \
              1,
              {
                'kind' => 'compute#forwardingRule',
                'description' => 'test description#0 data',
                'IPAddress' => 'test ip_address#0 data',
                'IPProtocol' => 'TCP',
                'backendService' => 'selflink(resource(backend_service,0))',
                'ipVersion' => 'IPV4',
                'loadBalancingScheme' => 'INTERNAL',
                'name' => 'title0',
                'network' => 'selflink(resource(network,0))',
                'portRange' => 'test port_range#0 data',
                'ports' => %w[uu vv],
                'subnetwork' => 'selflink(resource(subnetwork,0))',
                'target' => 'test target#0 data'
              },
              name: 'title0'
            expect_network_get_async 1, name: 'title0'
            expect_network_get_success_backend_service 1
            expect_network_get_success_network 1
            expect_network_get_success_region 1
            expect_network_get_success_subnetwork 1, region: 'test name#0 data'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcompute_backend_service { 'resource(backend_service,0)':
                ensure     => present,
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }

              gcompute_network { 'resource(network,0)':
                ensure     => present,
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }

              gcompute_region { 'resource(region,0)':
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }

              gcompute_subnetwork { 'resource(subnetwork,0)':
                ensure        => present,
                ip_cidr_range => 'test ip_cidr_range#0 data',
                name          => 'test name#0 data',
                network       => 'resource(network,0)',
                region        => 'resource(region,0)',
                project       => 'test project#0 data',
                credential    => 'cred0',
              }

              gcompute_global_forwarding_rule { 'title0':
                ensure                => present,
                backend_service       => 'resource(backend_service,0)',
                description           => 'test description#0 data',
                ip_address            => 'test ip_address#0 data',
                ip_protocol           => 'TCP',
                ip_version            => 'IPV4',
                load_balancing_scheme => 'INTERNAL',
                network               => 'resource(network,0)',
                port_range            => 'test port_range#0 data',
                ports                 => ['uu', 'vv'],
                subnetwork            => 'resource(subnetwork,0)',
                target                => 'test target#0 data',
                project               => 'test project#0 data',
                credential            => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcompute_global_forwarding_rule[title0]').provider.ensure
          end

          it { is_expected.to eq :present }
        end

        # Ensure present: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure present: resource missing, ignore, has name
      context 'title != name' do
        # Ensure present: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_failed 1
            expect_network_create \
              1,
              'kind' => 'compute#forwardingRule',
              'description' => 'test description#0 data',
              'IPAddress' => 'test ip_address#0 data',
              'IPProtocol' => 'TCP',
              'backendService' => 'selflink(resource(backend_service,0))',
              'ipVersion' => 'IPV4',
              'loadBalancingScheme' => 'INTERNAL',
              'name' => 'test name#0 data',
              'network' => 'selflink(resource(network,0))',
              'portRange' => 'test port_range#0 data',
              'ports' => %w[uu vv],
              'subnetwork' => 'selflink(resource(subnetwork,0))',
              'target' => 'test target#0 data'
            expect_network_get_async 1
            expect_network_get_success_backend_service 1
            expect_network_get_success_network 1
            expect_network_get_success_region 1
            expect_network_get_success_subnetwork 1, region: 'test name#0 data'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcompute_backend_service { 'resource(backend_service,0)':
                ensure     => present,
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }

              gcompute_network { 'resource(network,0)':
                ensure     => present,
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }

              gcompute_region { 'resource(region,0)':
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }

              gcompute_subnetwork { 'resource(subnetwork,0)':
                ensure        => present,
                ip_cidr_range => 'test ip_cidr_range#0 data',
                name          => 'test name#0 data',
                network       => 'resource(network,0)',
                region        => 'resource(region,0)',
                project       => 'test project#0 data',
                credential    => 'cred0',
              }

              gcompute_global_forwarding_rule { 'title0':
                ensure                => present,
                backend_service       => 'resource(backend_service,0)',
                description           => 'test description#0 data',
                ip_address            => 'test ip_address#0 data',
                ip_protocol           => 'TCP',
                ip_version            => 'IPV4',
                load_balancing_scheme => 'INTERNAL',
                name                  => 'test name#0 data',
                network               => 'resource(network,0)',
                port_range            => 'test port_range#0 data',
                ports                 => ['uu', 'vv'],
                subnetwork            => 'resource(subnetwork,0)',
                target                => 'test target#0 data',
                project               => 'test project#0 data',
                credential            => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcompute_global_forwarding_rule[title0]').provider.ensure
          end

          it { is_expected.to eq :present }
        end

        # Ensure present: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context 'ensure == absent' do
    context 'resource missing' do
      # Ensure absent: resource missing, ignore, no name
      context 'title == name' do
        # Ensure absent: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_failed 1, name: 'title0'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcompute_global_forwarding_rule { 'title0':
                ensure     => absent,
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcompute_global_forwarding_rule[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource missing, ignore, has name
      context 'title != name' do
        # Ensure absent: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_failed 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcompute_global_forwarding_rule { 'title0':
                ensure     => absent,
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcompute_global_forwarding_rule[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end

    context 'resource exists' do
      # Ensure absent: resource exists, ignore, no name
      context 'title == name' do
        # Ensure absent: resource exists, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_success 1, name: 'title0'
            expect_network_delete 1, 'title0'
            expect_network_get_async 1, name: 'title0'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcompute_global_forwarding_rule { 'title0':
                ensure     => absent,
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcompute_global_forwarding_rule[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource exists, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource exists, ignore, has name
      context 'title != name' do
        # Ensure absent: resource exists, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_success 1
            expect_network_delete 1
            expect_network_get_async 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcompute_global_forwarding_rule { 'title0':
                ensure     => absent,
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcompute_global_forwarding_rule[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource exists, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context '#flush' do
    subject do
      Puppet::Type.type(:gcompute_global_forwarding_rule).new(
        ensure: :present,
        name: 'my-name'
      ).provider
    end
    context 'no-op' do
      it { subject.flush }
    end
    context 'modified object' do
      before do
        subject.dirty :some_property, 'current', 'newvalue'
      end
      context 'no-op if created' do
        before { subject.instance_variable_set(:@created, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
      context 'no-op if deleted' do
        before { subject.instance_variable_set(:@deleted, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
    end
  end

  private

  def expect_network_get_success(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result("success#{id}~#{id_data}.yaml").to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{self_link(uri_data(id).merge(data))}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def http_success(body)
    response = Net::HTTPOK.new(1.0, 200, 'OK')
    response.body = body
    response.instance_variable_set(:@read, true)
    response
  end

  def expect_network_get_async(id, data = {})
    body = { kind: 'compute#forwardingRule' }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET <async> #{args}"
      request
    end
  end

  def expect_network_get_failed(id, data = {})
    request = double('request')
    allow(request).to receive(:send).and_return(http_failed_object_missing)

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET [failed] #{args}"
      request
    end
  end

  def http_failed_object_missing
    Net::HTTPNotFound.new(1.0, 404, 'Not Found')
  end

  def expect_network_create(id, expected_body, data = {})
    merged_uri = uri_data(id).merge(data)
    body = { kind: 'compute#operation',
             status: 'DONE', targetLink: self_link(merged_uri) }.to_json

    # Remove refs that are also part of the body
    expected_body = Hash[expected_body.map do |k, v|
      [k.is_a?(Symbol) ? k.id2name : k, v]
    end]

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! POST #{collection(merged_uri)}"
    expect(Google::Compute::Network::Post).to receive(:new)
      .with(collection(merged_uri), instance_of(Google::FakeAuthorization),
            'application/json', expected_body.to_json) do |args|
      debug_network ">> POST #{args} = body(#{body})"
      request
    end
  end

  def expect_network_delete(id, name = nil, data = {})
    delete_data = uri_data(id).merge(data)
    delete_data[:name] = name unless name.nil?
    body = { kind: 'compute#operation',
             status: 'DONE',
             targetLink: self_link(delete_data) }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! DELETE #{self_link(delete_data)}"
    expect(Google::Compute::Network::Delete).to receive(:new)
      .with(self_link(delete_data),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> DELETE #{args}"
      request
    end
  end

  def load_network_result(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_global_forwarding_rule', file)
    debug("Loading result file: #{results}")
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  def expect_network_get_success_backend_service(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_backend_service("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_backend_service(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link_backend_service(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_backend_service(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_backend_service', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcompute_backend_service objects
  def uri_data_backend_service(id)
    {
      project: GoogleTests::Constants::BS_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::BS_PROJECT_DATA.size],
      name: GoogleTests::Constants::BS_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::BS_NAME_DATA.size]
    }
  end

  def self_link_backend_service(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables_backend_service(
        'projects/{{project}}/global/backendServices/{{name}}',
        data
      )
    )
  end

  def expect_network_get_success_network(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_network("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_network(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link_network(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_network(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_network', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcompute_network objects
  def uri_data_network(id)
    {
      project: GoogleTests::Constants::N_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::N_PROJECT_DATA.size],
      name: GoogleTests::Constants::N_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::N_NAME_DATA.size]
    }
  end

  def self_link_network(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables_network(
        'projects/{{project}}/global/networks/{{name}}',
        data
      )
    )
  end

  def expect_network_get_success_subnetwork(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_subnetwork("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_subnetwork(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link_subnetwork(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_subnetwork(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_subnetwork', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcompute_subnetwork objects
  def uri_data_subnetwork(id)
    {
      project: GoogleTests::Constants::S_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::S_PROJECT_DATA.size],
      region: GoogleTests::Constants::S_REGION_DATA[(id - 1) \
        % GoogleTests::Constants::S_REGION_DATA.size],
      name: GoogleTests::Constants::S_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::S_NAME_DATA.size]
    }
  end

  def self_link_subnetwork(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables_subnetwork(
        'projects/{{project}}/regions/{{region}}/subnetworks/{{name}}',
        data
      )
    )
  end

  def expect_network_get_success_network(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_network("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_network(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link_network(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_network(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_network', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcompute_network objects
  def uri_data_network(id)
    {
      project: GoogleTests::Constants::N_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::N_PROJECT_DATA.size],
      name: GoogleTests::Constants::N_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::N_NAME_DATA.size]
    }
  end

  def self_link_network(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables_network(
        'projects/{{project}}/global/networks/{{name}}',
        data
      )
    )
  end

  def expect_network_get_success_region(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_region("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_region(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link_region(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_region(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_region', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcompute_region objects
  def uri_data_region(id)
    {
      project: GoogleTests::Constants::R_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::R_PROJECT_DATA.size],
      name: GoogleTests::Constants::R_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::R_NAME_DATA.size]
    }
  end

  def self_link_region(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables_region(
        'projects/{{project}}/regions/{{name}}',
        data
      )
    )
  end

  def expect_network_get_success_region(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_region("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_region(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link_region(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_region(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_region', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcompute_region objects
  def uri_data_region(id)
    {
      project: GoogleTests::Constants::R_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::R_PROJECT_DATA.size],
      name: GoogleTests::Constants::R_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::R_NAME_DATA.size]
    }
  end

  def self_link_region(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables_region(
        'projects/{{project}}/regions/{{name}}',
        data
      )
    )
  end

  def debug(message)
    puts(message) if ENV['RSPEC_DEBUG']
  end

  def debug_network(message)
    puts("Network #{message}") \
      if ENV['RSPEC_DEBUG'] || ENV['RSPEC_HTTP_VERBOSE']
  end

  def expand_variables_backend_service(template, data, ext_dat = {})
    Puppet::Type.type(:gcompute_backend_service).provider(:google)
                .expand_variables(template, data, ext_dat)
  end

  def expand_variables_network(template, data, ext_dat = {})
    Puppet::Type.type(:gcompute_network).provider(:google)
                .expand_variables(template, data, ext_dat)
  end

  def expand_variables_subnetwork(template, data, ext_dat = {})
    Puppet::Type.type(:gcompute_subnetwork).provider(:google)
                .expand_variables(template, data, ext_dat)
  end

  def expand_variables_network(template, data, ext_dat = {})
    Puppet::Type.type(:gcompute_network).provider(:google)
                .expand_variables(template, data, ext_dat)
  end

  def expand_variables_region(template, data, ext_dat = {})
    Puppet::Type.type(:gcompute_region).provider(:google)
                .expand_variables(template, data, ext_dat)
  end

  def expand_variables_region(template, data, ext_dat = {})
    Puppet::Type.type(:gcompute_region).provider(:google)
                .expand_variables(template, data, ext_dat)
  end

  def create_type(id)
    Puppet::Type.type(:gcompute_global_forwarding_rule).new(
      ensure: :present,
      title: "title#{id - 1}",
      credential: "cred#{id - 1}",
      project: GoogleTests::Constants::GFR_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::GFR_PROJECT_DATA.size],
      name: GoogleTests::Constants::GFR_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::GFR_NAME_DATA.size]
    )
  end

  def expand_variables(template, data, extra_data = {})
    Puppet::Type.type(:gcompute_global_forwarding_rule).provider(:google)
                .expand_variables(template, data, extra_data)
  end

  def collection(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables(
        'projects/{{project}}/global/forwardingRules',
        data
      )
    )
  end

  def self_link(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables(
        'projects/{{project}}/global/forwardingRules/{{name}}',
        data
      )
    )
  end

  # Creates variable test data to comply with self_link URI parameters
  def uri_data(id)
    {
      project: GoogleTests::Constants::GFR_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::GFR_PROJECT_DATA.size],
      name: GoogleTests::Constants::GFR_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::GFR_NAME_DATA.size]
    }
  end
end
