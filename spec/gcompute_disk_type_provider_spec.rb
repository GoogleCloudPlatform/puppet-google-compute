# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by puppet-codegen and manual
#     changes will be clobbered when the file is regenerated.
#
# ----------------------------------------------------------------------------

require 'spec_helper'

describe Puppet::Type.type(:gcompute_disk_type).provider(:google) do
  let(:start_time) { Time.new(2017, 1, 2, 3, 4, 5) }

  DT_PROJECT_DATA = %w(
    test\ project#0\ data
    test\ project#1\ data
    test\ project#2\ data
    test\ project#3\ data
    test\ project#4\ data
  ).freeze

  DT_ZONE_DATA = %w(
    test\ zone#0\ data
    test\ zone#1\ data
    test\ zone#2\ data
    test\ zone#3\ data
    test\ zone#4\ data
  ).freeze

  DT_NAME_DATA = %w(
    test\ name#0\ data
    test\ name#1\ data
    test\ name#2\ data
    test\ name#3\ data
    test\ name#4\ data
  ).freeze

  before do
    FakeWeb.clean_registry
    allow(Time).to receive(:now).and_return(start_time)
  end

  it '#instances' do
    expect { described_class.instances }.to raise_error(StandardError,
                                                        /not supported/)
  end

  context 'create provider' do
    subject { create_type(1).provider }

    it { is_expected.to have_attributes(creation_timestamp: :absent) }
    it { is_expected.to have_attributes(default_disk_size_gb: :absent) }
    it { is_expected.to have_attributes(deprecated_deleted: :absent) }
    it { is_expected.to have_attributes(deprecated_deprecated: :absent) }
    it { is_expected.to have_attributes(deprecated_obsolete: :absent) }
    it { is_expected.to have_attributes(deprecated_replacement: :absent) }
    it { is_expected.to have_attributes(deprecated_state: :absent) }
    it { is_expected.to have_attributes(description: :absent) }
    it { is_expected.to have_attributes(id: :absent) }
    it { is_expected.to have_attributes(valid_disk_size: :absent) }
  end

  context '#prefetch' do
    before do
      expect_network_get_success 1
      expect_network_get_success 2
      expect_network_get_failed 3
      expect_credential
      debug_network_expectations
    end

    let(:resource1) { create_type 1 }
    let(:resource2) { create_type 2 }
    let(:resource3) { create_type 3 }

    subject { [resource1, resource2, resource3] }

    context 'network' do
      before do
        # Process the resources
        described_class.prefetch(title1: resource1,
                                 title2: resource2,
                                 title3: resource3)
      end

      let(:providers) do
        [resource1.provider, resource2.provider, resource3.provider]
      end

      #
      # Ensure we have the final vales as retrieved from the service
      #

      context 'provider 1' do
        subject { providers[0] }

        it do
          is_expected
            .to have_attributes(creation_timestamp: '2045-05-23T05:08:10-07:00')
        end
        it do
          is_expected
            .to have_attributes(default_disk_size_gb: 2_109_438_101)
        end
        it do
          is_expected
            .to have_attributes(deprecated_deleted: '2023-11-07T08:45:28-08:00')
        end
        it do
          is_expected
            .to have_attributes(deprecated_deprecated: '2054-11-19T04:29:05-08:00')
        end
        it do
          is_expected
            .to have_attributes(deprecated_obsolete: '2008-04-07T17:34:16-07:00')
        end
        it do
          is_expected
            .to have_attributes(deprecated_replacement: 'test deprecated_replacement#0 data')
        end
        it { is_expected.to have_attributes(deprecated_state: 'DEPRECATED') }
        it do
          is_expected
            .to have_attributes(description: 'test description#0 data')
        end
        it { is_expected.to have_attributes(id: 2_149_500_871) }
        it { is_expected.to have_attributes(name: 'test name#0 data') }
        it do
          is_expected
            .to have_attributes(valid_disk_size: 'test valid_disk_size#0 data')
        end
      end
      #
      # Ensure we have the final vales as retrieved from the service
      #

      context 'provider 2' do
        subject { providers[1] }

        it do
          is_expected
            .to have_attributes(creation_timestamp: '2120-10-13T17:16:21-07:00')
        end
        it do
          is_expected
            .to have_attributes(default_disk_size_gb: 4_218_876_203)
        end
        it do
          is_expected
            .to have_attributes(deprecated_deleted: '2077-09-13T02:30:57-07:00')
        end
        it do
          is_expected
            .to have_attributes(deprecated_deprecated: '2139-10-08T17:58:11-07:00')
        end
        it do
          is_expected
            .to have_attributes(deprecated_obsolete: '2046-07-14T18:08:32-07:00')
        end
        it do
          is_expected
            .to have_attributes(deprecated_replacement: 'test deprecated_replacement#1 data')
        end
        it { is_expected.to have_attributes(deprecated_state: 'OBSOLETE') }
        it do
          is_expected
            .to have_attributes(description: 'test description#1 data')
        end
        it { is_expected.to have_attributes(id: 4_299_001_743) }
        it { is_expected.to have_attributes(name: 'test name#1 data') }
        it do
          is_expected
            .to have_attributes(valid_disk_size: 'test valid_disk_size#1 data')
        end
      end

      #
      # Ensure we have the final vales as retrieved from the service
      #

      context 'provider 3' do
        subject { providers[2] }

        it { is_expected.to have_attributes(creation_timestamp: :absent) }
        it { is_expected.to have_attributes(default_disk_size_gb: :absent) }
        it { is_expected.to have_attributes(deprecated_deleted: :absent) }
        it { is_expected.to have_attributes(deprecated_deprecated: :absent) }
        it { is_expected.to have_attributes(deprecated_obsolete: :absent) }
        it { is_expected.to have_attributes(deprecated_replacement: :absent) }
        it { is_expected.to have_attributes(deprecated_state: :absent) }
        it { is_expected.to have_attributes(description: :absent) }
        it { is_expected.to have_attributes(id: :absent) }
        it { is_expected.to have_attributes(valid_disk_size: :absent) }
      end
    end
  end

  context '#exists' do
    context 'with ensure set to :present' do
      subject do
        Puppet::Type.type(:gcompute_disk_type).provider(:google).new(
          ensure: :present
        ).exists?
      end

      it { is_expected.to be true }
    end

    context 'with ensure set to :absent' do
      subject do
        Puppet::Type.type(:gcompute_disk_type).provider(:google).new(
          ensure: :absent
        ).exists?
      end

      it { is_expected.to be false }
    end
  end

  #------------------------------------------------------------------
  context '#create' do
    context 'title only' do
      before do
        expect_network_create 4
        expect_credential
        debug_network_expectations

        Puppet::Type.type(:gcompute_disk_type).new(
          title: 'title4',
          creation_timestamp: '2271-07-27T17:32:43-07:00',
          default_disk_size_gb: 8_437_752_406,
          deprecated_deleted: '2185-05-27T12:01:54-07:00',
          deprecated_deprecated: '2309-07-16T18:56:22-07:00',
          deprecated_obsolete: '2123-01-26T18:17:04-08:00',
          deprecated_replacement: 'test deprecated_replacement#3 data',
          deprecated_state: 'DEPRECATED',
          description: 'test description#3 data',
          id: 8_598_003_486,
          valid_disk_size: 'test valid_disk_size#3 data',
          zone: 'test zone#3 data',
          project: 'test project#3 data',
          credential: 'cred3'
        ).provider.create
      end

      let(:expected_results) do
        {
          'kind' => 'compute#diskType',
        }
      end

      subject { JSON.parse(FakeWeb.last_request.body) }

      it { is_expected.to eq expected_results }
    end

    context 'title and name' do
      before do
        expect_network_create 4
        expect_credential
        debug_network_expectations

        Puppet::Type.type(:gcompute_disk_type).new(
          title: 'title4',
          creation_timestamp: '2271-07-27T17:32:43-07:00',
          default_disk_size_gb: 8_437_752_406,
          deprecated_deleted: '2185-05-27T12:01:54-07:00',
          deprecated_deprecated: '2309-07-16T18:56:22-07:00',
          deprecated_obsolete: '2123-01-26T18:17:04-08:00',
          deprecated_replacement: 'test deprecated_replacement#3 data',
          deprecated_state: 'DEPRECATED',
          description: 'test description#3 data',
          id: 8_598_003_486,
          name: 'test name#3 data',
          valid_disk_size: 'test valid_disk_size#3 data',
          zone: 'test zone#3 data',
          project: 'test project#3 data',
          credential: 'cred3'
        ).provider.create
      end

      let(:expected_results) do
        {
          'kind' => 'compute#diskType',
        }
      end

      subject { JSON.parse(FakeWeb.last_request.body) }

      it { is_expected.to eq expected_results }
    end
  end

  #------------------------------------------------------------------
  context '#delete' do
    context 'title only' do
      before do
        expect_network_delete 3, 'title3'
        expect_credential
        debug_network_expectations

        Puppet::Type.type(:gcompute_disk_type).new(
          title: 'title3',
          zone: 'test zone#2 data',
          project: 'test project#2 data',
          credential: 'cred2'
        ).provider.delete
      end

      it { expect(FakeWeb.last_request.method).to eq 'DELETE' }
    end

    context 'title and name' do
      before do
        expect_network_delete 3
        expect_credential
        debug_network_expectations

        Puppet::Type.type(:gcompute_disk_type).new(
          title: 'title3',
          name: 'test name#2 data',
          zone: 'test zone#2 data',
          project: 'test project#2 data',
          credential: 'cred2'
        ).provider.delete
      end

      it { expect(FakeWeb.last_request.method).to eq 'DELETE' }
    end
  end

  context '#flush' do
    subject do
      Puppet::Type.type(:gcompute_disk_type).new(
        ensure: :present,
        name: 'my-name'
      ).provider
    end

    context 'no-op' do
      it { subject.flush }
    end

    context 'modified object' do
      before do
        subject.dirty :some_property, 'current', 'newvalue'
      end

      context 'no-op if created' do
        before { subject.instance_variable_set(:@created, true) }
        it { expect { subject.flush }.not_to raise_error }
      end

      context 'no-op if deleted' do
        before { subject.instance_variable_set(:@deleted, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
    end
  end

  private

  def expect_credential
    cred = double('cred')
    Puppet::Type.type(:gauth_credential)
                .define_singleton_method(:fetch) { |_resource| cred }
    allow(cred).to receive(:authorize) { |arg| arg }
  end

  def expect_network_get_success(id)
    FakeWeb.register_uri(:get, self_link(uri_data(id)),
                         body: load_network_result("success#{id}.yaml").to_json)
  end

  def expect_network_get_failed(id)
    FakeWeb.register_uri(:get, self_link(uri_data(id)), status: 404)
  end

  def expect_network_create(id)
    FakeWeb.register_uri(:post,
                         collection(uri_data(id)),
                         status: 200,
                         body: { kind: 'compute#diskType' }.to_json)
  end

  def expect_network_delete(id, name = nil)
    delete_data = uri_data(id)
    delete_data[:name] = name unless name.nil?
    FakeWeb.register_uri(:delete, self_link(delete_data), status: 204)
  end

  def create_type(id)
    Puppet::Type.type(:gcompute_disk_type).new(
      ensure: :present,
      title: "title#{id - 1}",
      credential: "cred#{id - 1}",
      project: DT_PROJECT_DATA[(id - 1) % DT_PROJECT_DATA.size],
      zone: DT_ZONE_DATA[(id - 1) % DT_ZONE_DATA.size],
      name: DT_NAME_DATA[(id - 1) % DT_NAME_DATA.size]
    )
  end

  def collection(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables(
        'projects/{{project}}/zones/{{zone}}/diskTypes',
        data
      )
    )
  end

  def self_link(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables(
        'projects/{{project}}/zones/{{zone}}/diskTypes/{{name}}',
        data
      )
    )
  end

  def expand_variables(template, data, extra_data = {})
    Puppet::Type.type(:gcompute_disk_type).provider(:google)
                .expand_variables(template, data, extra_data)
  end

  # Creates variable test data to comply with self_link URI parameters
  def uri_data(id)
    {
      project: DT_PROJECT_DATA[(id - 1) % DT_PROJECT_DATA.size],
      zone: DT_ZONE_DATA[(id - 1) % DT_ZONE_DATA.size],
      name: DT_NAME_DATA[(id - 1) % DT_NAME_DATA.size]
    }
  end

  def load_network_result(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_disk_type', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  def debug_network_expectations
    FakeWeb::Registry.instance.uri_map.each do |name, _value|
      puts "Expect network: #{name}" if ENV['RSPEC_DEBUG']
    end
  end
end
