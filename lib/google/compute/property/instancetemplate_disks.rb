# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'google/compute/property/array'
require 'google/compute/property/base'

module Google
  module Compute
    module Data
      # A class to manage data for Disks for instance_template.
      class InstancTemplatDisks
        include Comparable

        attr_reader :auto_delete
        attr_reader :boot
        attr_reader :device_name
        attr_reader :disk_encryption_key
        attr_reader :index
        attr_reader :initialize_params
        attr_reader :interface
        attr_reader :mode
        attr_reader :source
        attr_reader :type

        def to_json(_arg = nil)
          {
            'autoDelete' => auto_delete,
            'boot' => boot,
            'deviceName' => device_name,
            'diskEncryptionKey' => disk_encryption_key,
            'index' => index,
            'initializeParams' => initialize_params,
            'interface' => interface,
            'mode' => mode,
            'source' => source,
            'type' => type
          }.reject { |_k, v| v.nil? }.to_json
        end

        def to_s
          {
            auto_delete: auto_delete,
            boot: boot,
            device_name: device_name,
            disk_encryption_key: disk_encryption_key,
            index: index,
            initialize_params: initialize_params,
            interface: interface,
            mode: mode,
            source: source,
            type: type
          }.reject { |_k, v| v.nil? }.map { |k, v| "#{k}: #{v}" }.join(', ')
        end

        def ==(other)
          return false unless other.is_a? InstancTemplatDisks
          compare_fields(other).each do |compare|
            next if compare[:self].nil? || compare[:other].nil?
            return false if compare[:self] != compare[:other]
          end
          true
        end

        def <=>(other)
          return false unless other.is_a? InstancTemplatDisks
          compare_fields(other).each do |compare|
            next if compare[:self].nil? || compare[:other].nil?
            result = compare[:self] <=> compare[:other]
            return result unless result.zero?
          end
          0
        end

        private

        def compare_fields(other)
          [
            { self: auto_delete, other: other.auto_delete },
            { self: boot, other: other.boot },
            { self: device_name, other: other.device_name },
            { self: disk_encryption_key, other: other.disk_encryption_key },
            { self: index, other: other.index },
            { self: initialize_params, other: other.initialize_params },
            { self: interface, other: other.interface },
            { self: mode, other: other.mode },
            { self: source, other: other.source },
            { self: type, other: other.type }
          ]
        end
      end

      # Manages a InstancTemplatDisks nested object
      # Data is coming from the GCP API
      class InstancTemplatDisksApi < InstancTemplatDisks
        # rubocop:disable Metrics/MethodLength
        def initialize(args)
          @auto_delete = Google::Compute::Property::Boolean.api_munge(args['autoDelete'])
          @boot = Google::Compute::Property::Boolean.api_munge(args['boot'])
          @device_name = Google::Compute::Property::String.api_munge(args['deviceName'])
          @disk_encryption_key =
            Google::Compute::Property::InstTempDiskEncrKey.api_munge(args['diskEncryptionKey'])
          @index = Google::Compute::Property::Integer.api_munge(args['index'])
          @initialize_params =
            Google::Compute::Property::InstaTemplInitiParam.api_munge(args['initializeParams'])
          @interface = Google::Compute::Property::Enum.api_munge(args['interface'])
          @mode = Google::Compute::Property::Enum.api_munge(args['mode'])
          @source = Google::Compute::Property::DiskNameRef.api_munge(args['source'])
          @type = Google::Compute::Property::Enum.api_munge(args['type'])
        end
        # rubocop:enable Metrics/MethodLength
      end

      # Manages a InstancTemplatDisks nested object
      # Data is coming from the Puppet manifest
      class InstancTemplatDisksCatalog < InstancTemplatDisks
        # rubocop:disable Metrics/MethodLength
        def initialize(args)
          @auto_delete = Google::Compute::Property::Boolean.unsafe_munge(args['auto_delete'])
          @boot = Google::Compute::Property::Boolean.unsafe_munge(args['boot'])
          @device_name = Google::Compute::Property::String.unsafe_munge(args['device_name'])
          @disk_encryption_key =
            Google::Compute::Property::InstTempDiskEncrKey.unsafe_munge(args['disk_encryption_key'])
          @index = Google::Compute::Property::Integer.unsafe_munge(args['index'])
          @initialize_params =
            Google::Compute::Property::InstaTemplInitiParam.unsafe_munge(args['initialize_params'])
          @interface = Google::Compute::Property::Enum.unsafe_munge(args['interface'])
          @mode = Google::Compute::Property::Enum.unsafe_munge(args['mode'])
          @source = Google::Compute::Property::DiskNameRef.unsafe_munge(args['source'])
          @type = Google::Compute::Property::Enum.unsafe_munge(args['type'])
        end
        # rubocop:enable Metrics/MethodLength
      end
    end

    module Property
      # A class to manage input to Disks for instance_template.
      class InstancTemplatDisks < Google::Compute::Property::Base
        # Used for parsing Puppet catalog
        def unsafe_munge(value)
          self.class.unsafe_munge(value)
        end

        # Used for parsing Puppet catalog
        def self.unsafe_munge(value)
          return if value.nil?
          Data::InstancTemplatDisksCatalog.new(value)
        end

        # Used for parsing GCP API responses
        def self.api_munge(value)
          return if value.nil?
          Data::InstancTemplatDisksApi.new(value)
        end
      end

      # A Puppet property that holds an integer
      class InstancTemplatDisksArray < Google::Compute::Property::Array
        # Used for parsing Puppet catalog
        def unsafe_munge(value)
          self.class.unsafe_munge(value)
        end

        # Used for parsing Puppet catalog
        def self.unsafe_munge(value)
          return if value.nil?
          return InstancTemplatDisks.unsafe_munge(value) \
            unless value.is_a?(::Array)
          value.map { |v| InstancTemplatDisks.unsafe_munge(v) }
        end

        # Used for parsing GCP API responses
        def self.api_munge(value)
          return if value.nil?
          return InstancTemplatDisks.api_munge(value) \
            unless value.is_a?(::Array)
          value.map { |v| InstancTemplatDisks.api_munge(v) }
        end
      end
    end
  end
end
