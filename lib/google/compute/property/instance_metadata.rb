# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by puppet-codegen and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'google/compute/property/base'

module Google
  module Compute
    module Data
      # A class to manage data for metadata for instance.
      class InstanceMetadata < ::Hash
        attr_reader :data

        def initialize(args)
          validate(args)
          @data = args
        end

        # Validate if keys and values match defined type
        def validate(args)
          args.keys.each do |k|
            next if k.is_a?(::String)
            raise TypeError,
                  ['instance/metadata',
                   'has invalid type for key', k].join(' ')
          end

          args.each do |k, v|
            next if v.is_a?(::String)
            raise TypeError,
                  ['instance/metadata',
                   'has invalid type for value', v, 'of key', k].join(' ')
          end
        end

        def to_json(_arg = nil)
          {
            'items' => @data.map do |k, v|
              { key: k, value: v }
            end
          }.to_json
        end

        def to_s
          @data.map { |k, v| "#{k}: #{v}" }.join(', ')
        end

        def ==(other)
          return false unless other.is_a? InstanceMetadata
          @data == other.data
        end

        def <=>(other)
          return false unless other.is_a? InstanceMetadata
          @data <=> other.data
        end
      end

      # Manages a InstanceMetadata name/value pairs
      # Data is coming from the GCP API
      class InstanceMetadataApi < InstanceMetadata
        def initialize(args)
          super(Hash[args['items'].map { |i| [i['key'], i['value']] }])
        end
      end

      # Manages a InstanceMetadata name/value pairs
      # Data is coming from the Puppet manifest
      class InstanceMetadataCatalog < InstanceMetadata
      end
    end
    module Property
      # A Puppet property that holds a string
      class InstanceMetadata < Google::Compute::Property::Base
        # Used for parsing Puppet catalog
        def unsafe_munge(value)
          self.class.unsafe_munge(value)
        end

        # Used for parsing Puppet catalog
        def self.unsafe_munge(value)
          return if value.nil?
          Data::InstanceMetadataCatalog.new(value)
        end

        # Used for parsing GCP API responses
        def self.api_munge(value)
          return if value.nil?
          Data::InstanceMetadataApi.new(value)
        end
      end
    end
  end
end
